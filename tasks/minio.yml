---

- ansible.builtin.import_tasks: docker.yml

- name: ensure minio service account exists
  ansible.builtin.user:
    name: '{{ minio.user }}'
    group: docker

# S3AccessIT tests will fail without hard-coded AWS credentials

- name: ensure dot dir exists
  ansible.builtin.file:
    path: '~{{ dataverse.payara.user }}/.aws'
    state: directory
    owner: '{{ dataverse.payara.user }}'
    group: '{{ dataverse.payara.group }}'
    mode: '0700'

- name: place aws credentials
  template:
    src: aws_credentials.j2
    dest: '~{{ dataverse.payara.user }}/.aws/credentials'
    owner: '{{ dataverse.payara.user }}'
    group: '{{ dataverse.payara.group }}'
    mode: '0600'

- name: place aws config
  template:
    src: aws_config.j2
    dest: '~{{ dataverse.payara.user }}/.aws/config'
    owner: '{{ dataverse.payara.user }}'
    group: '{{ dataverse.payara.group }}'
    mode: '0600'

# remove these once #### has been merged.

- name: STORAGE | Import assert.yml
  ansible.builtin.import_tasks: minio_assert.yml
  run_once: true
  delegate_to: localhost

- name: STORAGE | Initialized MINIO project directory.
  block:
    - name: STORAGE | Check MinIO initial directory
      ansible.builtin.stat:
        path: "{{ minio.docker.project_location }}"
      register: minio_init_dir

    - name: STORAGE | Create minio project directory
      ansible.builtin.file:
        path: "{{ minio.docker.project_location }}"
        state: directory
        mode: "0755"
        recurse: true
      when: not minio_init_dir.stat.exists

- name: STORAGE | Setup MINIO project.
  block:
    - name: STORAGE | Check MinIO initial directory
      ansible.builtin.stat:
        path: "{{ minio.docker.project_location }}"
      register: minio_dir

    - name: STORAGE | Create minio persistent data directory.
      ansible.builtin.file:
        path: "{{ minio.docker.project_location }}/data"
        state: directory
        owner: '{{ minio.user }}'
        mode: "0755"
        recurse: true
      when:
        - minio_dir.stat.exists
        - minio_dir.stat.isdir

    - name: STORAGE | Copy MinIO docker compose variables
      ansible.builtin.template:
        src: minio_compose.j2
        dest: "{{ minio.docker.project_location }}/minio_compose.yml"
        owner: '{{ minio.user }}'
        mode: "0644"
        lstrip_blocks: true
        force: true
      register: copy_compose
      when:
        - minio_dir.stat.exists
        - minio_dir.stat.isdir

    - name: STORAGE | Get infos on container
      community.docker.docker_container_info:
        name: "{{ minio.docker.service_name }}"
      register: minio_container

    - name: STORAGE | Check docker compose file
      ansible.builtin.stat:
        path: "{{ minio.docker.project_location }}/minio_compose.yml"
      register: compose_file

    - name: STORAGE | Stop `docker-compose down` MinIO
      ansible.builtin.shell: 'docker compose -f {{ minio.docker.project_location }}/minio_compose.yml down'
      become: true
      become_user: '{{ minio.user }}'
      args:
        chdir: '~{{ minio.user }}'
      register: continer_stop
      when:
        - minio_container.exists
        - copy_compose.changed

    - name: STORAGE | Run `docker-compose up` MinIO
      ansible.builtin.shell: 'docker compose -f {{ minio.docker.project_location }}/minio_compose.yml up -d'
      become: true
      become_user: '{{ minio.user }}'
      args:
        chdir: '~{{ minio.user }}'
      when: (not minio_container.exists and minio_dir.stat.isdir and compose_file.stat.exists) or continer_stop.changed

- ansible.builtin.import_tasks: minio_jvm_options.yml
