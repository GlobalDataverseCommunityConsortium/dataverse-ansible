---

- name: get FQDN
  ansible.builtin.debug:
    msg: '##### DETERMINE FQDN #####'

- name: default to http
  ansible.builtin.set_fact:
    protocol: http

- name: unless ssl is enabled
  ansible.builtin.set_fact:
    protocol: https
  when: apache.ssl.enabled == True
        or apache.behind_ssl_reverse_proxy

- name: ansible tasks like variables, not group_vars
  ansible.builtin.set_fact:
    siteUrl: '{{ dataverse.payara.siteurl }}'

- name: did it find siteUrl
  ansible.builtin.debug:
    msg: 'using siteUrl: {{ siteUrl }}'

- name: if public_fqdn is passed, use that.
  ansible.builtin.set_fact:
    public_fqdn: '{{ apache.public_fqdn }}'

- name: and stick with it.
  ansible.builtin.set_fact:
    custom_fqdn: True
  when: public_fqdn|length > 1

- name: if no public_fqdn, use ansible fqdn
  ansible.builtin.set_fact:
    public_fqdn: '{{ ansible_fqdn }}'
  when: custom_fqdn is undefined

- name: if siteUrl not passed, let's construct one.
  ansible.builtin.set_fact:
    siteUrl: '{{ protocol }}://{{ public_fqdn }}'
  when: siteUrl|length == 0

- name: if we're in EC2, ansible_fqdn is no good.
  ansible.builtin.uri:
    url: http://169.254.169.254/latest/meta-data/
    timeout: 2
  register: aws_uri_check
  failed_when: False

- set_fact:
    is_aws_environment: "{{ aws_uri_check.status == 200 }}"

- name: if we're in EC2 and no public_fqdn, get public hostname
  ansible.builtin.uri:
    url: http://169.254.169.254/latest/meta-data/public-hostname
    return_content: yes
  register: ec2_hostname_output
  when: is_aws_environment
        and custom_fqdn is undefined

- name: but some EC2 instances have no public hostname
  ansible.builtin.set_fact:
    is_public_hostname: "{{ ec2_hostname_output.status == 200 }}"
  when: is_aws_environment
        and custom_fqdn is undefined

- name: if we're in EC2 and no public_fqdn, set public hostname
  ansible.builtin.set_fact:
    public_hostname: "{{ ec2_hostname_output.content }}"
  when: is_aws_environment
        and custom_fqdn is undefined
        and is_public_hostname

- name: correct siteUrl for EC2
  ansible.builtin.set_fact:
    siteUrl: '{{ protocol }}://{{ public_hostname }}'
  when: is_aws_environment
        and custom_fqdn is undefined
        and is_public_hostname

# for asadmin command
- name: escape colons in siteurl
  ansible.builtin.set_fact:
    siteUrl_escaped: "{{ siteUrl | regex_replace (':','\\:') }}"

# for errybody else
- name: debug
  debug:
    msg: 'siteUrl is {{ siteUrl }}'

- name: strip siteurl for servername directives
  ansible.builtin.set_fact:
    servername: "{{ siteUrl | regex_replace('[A-z]*://', '') }}"

- name: debug
  debug:
    msg: 'servername is {{ servername }}'
