---

- name: begin integration test task
  debug:
    msg: '##### RUN INTEGRATION TESTS #####'

- include: maven.yml

- name: do we have a pom.xml
  stat:
    path: '{{ dataverse.srcdir }}/pom.xml'
  register: pom_xml

- name: if we're not in a branch, grab release source
  get_url:
    url: 'https://github.com/IQSS/dataverse/archive/v{{ dataverse.version }}.tar.gz'
    dest: '/tmp'
  when: pom_xml.stat.exists == false

- name: unarchive won't create directories for us
  file:
    path: '{{ dataverse.srcdir }}'
    state: directory
  when: pom_xml.stat.exists == false

- name: unpack, strip root directory
  shell: 'bsdtar --strip-components=1 -C {{ dataverse.srcdir }} -xf /tmp/dataverse-{{ dataverse.version }}.tar.gz'
  when: pom_xml.stat.exists == false

- name: ensure we have api script data directory
  shell: "/bin/cp -r {{ dataverse.srcdir }}/scripts/api/data /tmp/dvinstall/"

- name: grab latest copy of run-test-suite.sh
  get_url:
    url: 'https://raw.githubusercontent.com/IQSS/dataverse/{{ dataverse_branch }}/conf/docker-aio/run-test-suite.sh'
    dest: '{{ dataverse.srcdir }}/run-test-suite.sh'
    mode: 0755

- name: update run-test-suite.sh to find our maven.sh in profile.d
  replace:
    path: '{{ dataverse.srcdir }}/run-test-suite.sh'
    regexp: 'maven/maven.sh'
    replace: '/etc/profile.d/maven.sh'

- name: run only specified tests
  lineinfile:
    path: /tmp/dataverse/run-test-suite.sh
    regexp: '^mvn test.*'
    line: 'mvn test -Dtest={{ dataverse.api.tests }} -Ddataverse.test.baseurl=$dvurl'
  when: dataverse.api.tests != "all"

- name: set user management quesadilla
  uri:
    url: 'http://localhost:8080/api/admin/settings/BuiltinUsers.KEY'
    method: PUT
    body: '{{ dataverse.usermgmtkey }}'

- include: dataverse-apitoken.yml

- name: allow authenticated users to add to root
  uri:
    url: 'http://localhost:8080/api/dataverses/root/assignments?key={{ api_token }}'
    method: POST
    body: '{"assignee":":authenticated-users","role":"fullContributor"}'
    body_format: json

- name: is root dataverse already published
  stat:
     path: /tmp/dataverse/root_dv_published
  register: root_dv_published

- name: the root dataverse must be published
  uri:
    url: 'http://localhost:8080/api/dataverses/root/actions/:publish'
    method: POST
    headers:
      X-Dataverse-key: '{{ api_token }}'
  when: root_dv_published.stat.exists == False

- name: run test suite with default maven
  shell: '{{ dataverse.srcdir }}/run-test-suite.sh http://localhost:8080'
  args:
    chdir: '{{ dataverse.srcdir }}'
  environment:
    DVAPIKEY: '{{ dataverse.usermgmtkey }}'
    DV_APIKEY: '{{ dataverse.usermgmtkey }}'
    DV_API_KEY: '{{ dataverse.usermgmtkey }}'
  when: maven.version == 'default'

- name: run test suite with custom maven
  shell: 'source /etc/profile.d/maven.sh && {{ dataverse.srcdir }}/run-test-suite.sh http://localhost:8080'
  args:
    chdir: '{{ dataverse.srcdir }}'
  environment:
    DVAPIKEY: '{{ dataverse.usermgmtkey }}'
    DV_APIKEY: '{{ dataverse.usermgmtkey }}'
    DV_API_KEY: '{{ dataverse.usermgmtkey }}'
  when: maven.version != 'default'

- name: generate HTML reports with default maven
  shell: 'mvn surefire-report:report'
  args:
    chdir: '{{ dataverse.srcdir }}'
  when: maven.version == 'default'

- name: generate HTML reports with custom maven
  shell: 'source /etc/profile.d/maven.sh && mvn surefire-report:report'
  args:
    chdir: '{{ dataverse.srcdir }}'
  when: maven.version != 'default'
